-- Drop all tables that depend on enums or other objects
DROP TABLE IF EXISTS todos CASCADE;
DROP TABLE IF EXISTS todo_members CASCADE;
DROP TABLE IF EXISTS token_providers CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Drop all custom enum types
DROP TYPE IF EXISTS member_role CASCADE;
DROP TYPE IF EXISTS priority CASCADE;
DROP TYPE IF EXISTS user_role CASCADE;

-- Optionally, drop any remaining indexes (if necessary)
DROP INDEX IF EXISTS idx_todo_members_todo_id;
DROP INDEX IF EXISTS idx_todo_members_user_id;
DROP INDEX IF EXISTS idx_todo_members_role;
DROP INDEX IF EXISTS idx_todos_user_id;
DROP INDEX IF EXISTS idx_todos_priority;
DROP INDEX IF EXISTS idx_token_providers_user_id;
DROP INDEX IF EXISTS idx_token_providers_expired_at;
DROP INDEX IF EXISTS idx_users_email;


CREATE TYPE user_role AS ENUM ('superadmin', 'admin', 'moderator', 'user', 'guest');

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    -- auth_id VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role user_role DEFAULT 'user' NOT NULL,
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    is_admin BOOLEAN DEFAULT FALSE NOT NULL,
    is_blocked BOOLEAN DEFAULT FALSE NOT NULL,
    is_deleted BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- ALTER TABLE users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;

-- CREATE INDEX idx_users_auth_id ON users (auth_id);
CREATE INDEX idx_users_email ON users (email);


CREATE TYPE priority AS ENUM ('Low', 'Medium', 'High');

CREATE TABLE todos (
    id SERIAL PRIMARY KEY,
    user_id int NOT NULL,
    -- auth_id VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    is_completed BOOLEAN DEFAULT FALSE NOT NULL,
    due_date TIMESTAMP,
    priority priority DEFAULT 'Medium',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_todos_user_id ON todos (user_id);
CREATE INDEX idx_todos_priority ON todos (priority);


CREATE TYPE member_role AS ENUM ('Viewer', 'Owner', 'Collaborator', 'Assignee', 'Reviewer', 'Member');

CREATE TABLE todo_members (
    id SERIAL PRIMARY KEY,
    todo_id INT NOT NULL,
    user_id int NOT NULL,
    role member_role DEFAULT 'Viewer',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (todo_id) REFERENCES todos(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE (todo_id, user_id)
);

CREATE INDEX idx_todo_members_todo_id ON todo_members (todo_id);
CREATE INDEX idx_todo_members_user_id ON todo_members (user_id);
CREATE INDEX idx_todo_members_role ON todo_members (role);

CREATE TABLE token_providers (
    id SERIAL PRIMARY KEY,
    user_id int NOT NULL,
    access_token TEXT NOT NULL,
    refresh_token TEXT NOT NULL,
    expired_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_token_providers_user_id ON token_providers (user_id);
CREATE INDEX idx_token_providers_expired_at ON token_providers (expired_at);

